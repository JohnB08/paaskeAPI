openapi: 3.0.0
info:
  version: 1.0.0
  title: Kodehode påskelAPIrinten 2024
  description: |
    Welcome to this years påskelAPIrint, this is a quiz that follows the traditions of other påskelabyrinter. 
    Your group will be served a selection of questions, all of which have a hidden common denominator.
    It is your job to answer the questions, and puzzle out the common demoninator at the end. 

servers:
  - url: https://paaskeapi.onrender.com/
paths:
  /new_group:
    get:
      description: |
        Post your group_name, and recieve an api key,
        the api key also works as your timer.

        Example requests for posting: 

        ```bash
        curl -X GET 'https://paaskeapi.onrender.com/new_group' -H 'group_name: your group_name here'
        ```
        
        Example using Node.js
        
        ```javascript
        
        const response = await fetch('https://paaskeapi.onrender.com/new_group', {
          method: 'GET',
          headers: {
            group_name: 'your group_name here'
            }
          }
          const result = await response.json()
          console.log(result)
        )
        ```

      parameters:
        - name: group_name
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                      api_key:
                        type: string
                    required:
                      - message
                      - api_key
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
  /question:
    get:
      description: |
        Get the current question for your group
        Example requests for posting: 

        ```bash
        curl -X GET 'https://paaskeapi.onrender.com/api_key' -H 'api_key: your api_key here'
        ```
        
        Example using Node.js
        
        ```javascript
        
        const response = await fetch('https://paaskeapi.onrender.com/question', {
          method: 'GET',
          headers: {
            api_key: 'your api_key here'
            }
          }
          const result = await response.json()
          console.log(result)
        )
        ```
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
      responses:
        '200':
          description: Renders a response deppending on if the group has completed their questionloop. Check the schema tab for both examples.
          content:
            application/json:
              schema:
                oneOf:
                  - description: When there are still questions left to answer.
                    type: object
                    properties:
                      success: 
                        type: object
                        properties:
                          message:
                            type: string
                          question_id:
                            type: integer
                          question:
                            type: string
                        required:
                          - message
                          - question_id
                          - question
                  - description: When you are done with the question loop.
                    type: object
                    properties:
                      success: 
                        type: object
                        properties:
                          message:
                            type: string
                        required:
                          - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
    post:
      description: |
        Posts an Answer to a served question, remember to set "Content-Type" in header!

        Example requests for posting: 

        ```bash
        curl -X POST 'https://paaskeapi.onrender.com/question' \
        -H 'api_key: your api_key here' \
        -H 'Content-Type: application/json' \
        -d '{"question_id": 42, "answer": "everything"}'
        ```
        
        Example using Node.js
        
        ```javascript
        
        const response = await fetch('https://paaskeapi.onrender.com/question', {
          method: 'POST',
          headers: {
              api_key: 'your api_key here',
              'Content-Type': 'application/json'
              },
          body: JSON.stringify({
              question_id: 42,
              answer: 'everything'
            })
          }
          const result = response.json()
          console.log(result)
        )
        ```
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
      requestBody:
        description: The request body should contain the question ID and the answer.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: number
                answer:
                  type: string
              required:
                - questionId
                - answer
      responses:
        '200':
          description: Renders a response deppending on if the group has completed their questionloop. Check the schema tab for both examples.
          content:
            application/json:
              schema:
                oneOf:
                  - description: When there are still questions left to answer.
                    type: object
                    properties:
                      success: 
                        type: object
                        properties:
                          message:
                            type: string
                          question_id:
                            type: integer
                          question:
                            type: string
                        required:
                          - message
                          - question_id
                          - question
                  - description: When you are done with the question loop.
                    type: object
                    properties:
                      success: 
                        type: object
                        properties:
                          message:
                            type: string
                        required:
                          - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message